/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
    //limited         cellLimited Gauss linear 1;
}

divSchemes
{
    default                        none;
    
    div(phi,alpha)              Gauss vanLeer;
    div(phir,alpha)             Gauss vanLeer;

    div(alphaRhoPhi,U)          Gauss limitedLinearV 1;
    div(phi,U)                  Gauss limitedLinearV 1;

    div(alphaRhoPhi,Yi)         Gauss limitedLinear 1;
    "div\(alphaRhoPhi,(h|e)\)"  Gauss limitedLinear 1;

    div(alphaRhoPhi,K)          Gauss limitedLinear 1;
    div(alphaRhoPhi,(p|rho))    Gauss limitedLinear 1;

    "div\(alphaRhoPhi,(k|epsilon)\)"  Gauss limitedLinear 1;
    "div\(phim,(k|epsilon)m\)"  Gauss limitedLinear 1;

    div((((alpha*rho)*nuEff)*dev2(T(grad(U))))) Gauss linear;

    /*
    div(phi,alpha)            Gauss vanLeer;
    div(phir,alpha)           Gauss vanLeer;

    div(alphaRhoPhi,U)      Gauss linearUpwind limited;
    div(phi,U)              Gauss linearUpwind limited;

    div(alphaRhoPhi,Yi)       Gauss linearUpwind limited;
    "div\(alphaRhoPhi,(h|e)\)"  Gauss linearUpwind limited;
    div(alphaRhoPhi,K)      Gauss linearUpwind limited;
    div(alphaRhoPhi,(p|rho)) Gauss linearUpwind limited;
    div(phi,kappai)         Gauss linearUpwind limited;
    "div\(alphaRhoPhi,(k|epsilon|omega)\)"  Gauss linearUpwind limited;
    "div\(phim,(k|epsilon)m\)"      Gauss linearUpwind limited;

    div((((alpha*rho)*nuEff)*dev2(T(grad(U))))) Gauss linear;
    */
}

laplacianSchemes
{
    default         Gauss linear uncorrected; //Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         uncorrected; // corrected;
}

fluxRequired
{
    default         no;
}

wallDist
{
    method          meshWave;
}


// ************************************************************************* //